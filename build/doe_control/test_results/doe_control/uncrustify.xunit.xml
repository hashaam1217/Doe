<?xml version="1.0" encoding="UTF-8"?>
<testsuite
  name="doe_control.uncrustify"
  tests="2"
  failures="2"
  errors="0"
  time="0.020"
>
  <testcase
    name="include/doe_control/thrust_publisher.hpp"
    classname="doe_control.uncrustify"
  >
      <failure message="Diff with 66 lines"><![CDATA[--- include/doe_control/thrust_publisher.hpp
+++ include/doe_control/thrust_publisher.hpp.uncrustify
@@ -17,2 +17,2 @@
-    class ThrustPublisher: public rclcpp::Node
-    {
+class ThrustPublisher : public rclcpp::Node
+{
@@ -20,2 +20 @@
-    public:
-
+public:
@@ -29 +28 @@
-        explicit ThrustPublisher(const rclcpp::NodeOptions & options);
+  explicit ThrustPublisher(const rclcpp::NodeOptions & options);
@@ -31,2 +30 @@
-    private:
-
+private:
@@ -43 +41 @@
-        void wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const;
+  void wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const;
@@ -51 +49 @@
-        std::vector<double> cross(std::vector<double> r,std::vector<double> F);
+  std::vector<double> cross(std::vector<double> r, std::vector<double> F);
@@ -58 +56 @@
-        std::vector<std::vector<double>> createAllocMat();
+  std::vector<std::vector<double>> createAllocMat();
@@ -67 +65 @@
-        uint32_t forceToLevel(double force) const;
+  uint32_t forceToLevel(double force) const;
@@ -69,2 +67,2 @@
-        rclcpp::Publisher<std_msgs::msg::Float64MultiArray>::SharedPtr forces_pub_;
-        rclcpp::Publisher<std_msgs::msg::UInt32>::SharedPtr signals_pub_;
+  rclcpp::Publisher<std_msgs::msg::Float64MultiArray>::SharedPtr forces_pub_;
+  rclcpp::Publisher<std_msgs::msg::UInt32>::SharedPtr signals_pub_;
@@ -72 +70 @@
-        rclcpp::Subscription<geometry_msgs::msg::Wrench>::SharedPtr forces_sub_;
+  rclcpp::Subscription<geometry_msgs::msg::Wrench>::SharedPtr forces_sub_;
@@ -74 +72 @@
-        cv::Mat pinv_alloc_;
+  cv::Mat pinv_alloc_;
@@ -76,12 +74,12 @@
-        int num_thrusters_ = 0;
-        int bits_per_thruster_ = 0;
-        int encode_levels_ = 0;
-        double max_fwd_ = 0;
-        double max_rev_ = 0;
-        std::vector<double> x_lens_;
-        std::vector<double> y_lens_;
-        std::vector<double> z_lens_;
-        std::vector<double> x_contribs_;
-        std::vector<double> y_contribs_;
-        std::vector<double> z_contribs_;
-    };
+  int num_thrusters_ = 0;
+  int bits_per_thruster_ = 0;
+  int encode_levels_ = 0;
+  double max_fwd_ = 0;
+  double max_rev_ = 0;
+  std::vector<double> x_lens_;
+  std::vector<double> y_lens_;
+  std::vector<double> z_lens_;
+  std::vector<double> x_contribs_;
+  std::vector<double> y_contribs_;
+  std::vector<double> z_contribs_;
+};
]]></failure>
  </testcase>
  <testcase
    name="src/thrust_publisher.cpp"
    classname="doe_control.uncrustify"
  >
      <failure message="Diff with 291 lines"><![CDATA[--- src/thrust_publisher.cpp
+++ src/thrust_publisher.cpp.uncrustify
@@ -7,2 +7,2 @@
-    ThrustPublisher::ThrustPublisher(const rclcpp::NodeOptions & options) :
-    Node ("thrust_publisher", options),
+ThrustPublisher::ThrustPublisher(const rclcpp::NodeOptions & options)
+:Node ("thrust_publisher", options),
@@ -10,3 +10,3 @@
-        x_lens_ (SUPPORTED_THRUSTERS, 0),
-        y_lens_ (SUPPORTED_THRUSTERS, 0),
-        z_lens_ (SUPPORTED_THRUSTERS, 0),
+  x_lens_ (SUPPORTED_THRUSTERS, 0),
+  y_lens_ (SUPPORTED_THRUSTERS, 0),
+  z_lens_ (SUPPORTED_THRUSTERS, 0),
@@ -14,9 +14,9 @@
-        x_contribs_ (SUPPORTED_THRUSTERS, 0),
-        y_contribs_ (SUPPORTED_THRUSTERS, 0),
-        z_contribs_ (SUPPORTED_THRUSTERS, 0)
-    {
-        this->declare_parameter<int>("num_thrusters", num_thrusters_);
-        if (num_thrusters_ > SUPPORTED_THRUSTERS)
-        {
-            RCLCPP_ERROR(this->get_logger(), "Number of thrusters is greater than supported thruster count");
-        }
+  x_contribs_ (SUPPORTED_THRUSTERS, 0),
+  y_contribs_ (SUPPORTED_THRUSTERS, 0),
+  z_contribs_ (SUPPORTED_THRUSTERS, 0)
+{
+  this->declare_parameter<int>("num_thrusters", num_thrusters_);
+  if (num_thrusters_ > SUPPORTED_THRUSTERS) {
+    RCLCPP_ERROR(this->get_logger(),
+        "Number of thrusters is greater than supported thruster count");
+  }
@@ -24,2 +24,2 @@
-        this->declare_parameter<int>("bits_per_thruster", bits_per_thruster_);
-        this->get_parameter("bits_per_thruster", bits_per_thruster_);
+  this->declare_parameter<int>("bits_per_thruster", bits_per_thruster_);
+  this->get_parameter("bits_per_thruster", bits_per_thruster_);
@@ -27,6 +27,6 @@
-        this->declare_parameter<double>("max_fwd", max_fwd_);
-        this->get_parameter("max_fwd", max_fwd_);
-        max_fwd_ *= 9.807; // kgf to N
-        this->declare_parameter<double>("max_rev", max_rev_);
-        max_rev_ *= 9.807; // kgf to N
-        this->get_parameter("max_rev", max_rev_);
+  this->declare_parameter<double>("max_fwd", max_fwd_);
+  this->get_parameter("max_fwd", max_fwd_);
+  max_fwd_ *= 9.807;       // kgf to N
+  this->declare_parameter<double>("max_rev", max_rev_);
+  max_rev_ *= 9.807;       // kgf to N
+  this->get_parameter("max_rev", max_rev_);
@@ -34 +34 @@
-        encode_levels_ = pow(2,bits_per_thruster_);
+  encode_levels_ = pow(2, bits_per_thruster_);
@@ -36 +36,2 @@
-        std::string names[SUPPORTED_THRUSTERS] = {"thruster1", "thruster2", "thruster3", "thruster4", "thruster5", "thruster6", "thruster8", "thruster9", "thruster10"};
+  std::string names[SUPPORTED_THRUSTERS] = {"thruster1", "thruster2", "thruster3", "thruster4",
+    "thruster5", "thruster6", "thruster8", "thruster9", "thruster10"};
@@ -38,8 +39,7 @@
-        for (int i = 0; i < SUPPORTED_THRUSTERS; i++)
-        {
-            this->declare_parameter(names[i]+".contrib.x", x_contribs_[i]);
-            this->declare_parameter(names[i]+".contrib.y", y_contribs_[i]);
-            this->declare_parameter(names[i]+".contrib.z", z_contribs_[i]);
-            this->declare_parameter(names[i]+".lx", x_lens_[i]);
-            this->declare_parameter(names[i]+".ly", y_lens_[i]);
-            this->declare_parameter(names[i]+".lz", z_lens_[i]);
+  for (int i = 0; i < SUPPORTED_THRUSTERS; i++) {
+    this->declare_parameter(names[i] + ".contrib.x", x_contribs_[i]);
+    this->declare_parameter(names[i] + ".contrib.y", y_contribs_[i]);
+    this->declare_parameter(names[i] + ".contrib.z", z_contribs_[i]);
+    this->declare_parameter(names[i] + ".lx", x_lens_[i]);
+    this->declare_parameter(names[i] + ".ly", y_lens_[i]);
+    this->declare_parameter(names[i] + ".lz", z_lens_[i]);
@@ -47,8 +47,8 @@
-            this->get_parameter(names[i]+".contrib.x", x_contribs_[i]);
-            this->get_parameter(names[i]+".contrib.y", y_contribs_[i]);
-            this->get_parameter(names[i]+".contrib.z", z_contribs_[i]);
-            this->get_parameter(names[i]+".lx", x_lens_[i]);
-            this->get_parameter(names[i]+".ly", y_lens_[i]);
-            this->get_parameter(names[i]+".lz", z_lens_[i]);
-        }
-        std::vector<std::vector<double>> alloc_vec =  createAllocMat();
+    this->get_parameter(names[i] + ".contrib.x", x_contribs_[i]);
+    this->get_parameter(names[i] + ".contrib.y", y_contribs_[i]);
+    this->get_parameter(names[i] + ".contrib.z", z_contribs_[i]);
+    this->get_parameter(names[i] + ".lx", x_lens_[i]);
+    this->get_parameter(names[i] + ".ly", y_lens_[i]);
+    this->get_parameter(names[i] + ".lz", z_lens_[i]);
+  }
+  std::vector<std::vector<double>> alloc_vec = createAllocMat();
@@ -56,4 +56,6 @@
-        cv::Mat alloc_mat (alloc_vec.size(), alloc_vec[0].size(), CV_64FC1);
-        for (int i = 0; i < alloc_mat.rows; i++)
-            for (int j = 0; j < alloc_mat.cols; j++)
-                alloc_mat.at<double>(i,j) = alloc_vec[i][j];
+  cv::Mat alloc_mat (alloc_vec.size(), alloc_vec[0].size(), CV_64FC1);
+  for (int i = 0; i < alloc_mat.rows; i++) {
+    for (int j = 0; j < alloc_mat.cols; j++) {
+      alloc_mat.at<double>(i, j) = alloc_vec[i][j];
+    }
+  }
@@ -64 +66 @@
-        cv::invert(alloc_mat, pinv_alloc_, cv::DECOMP_SVD);
+  cv::invert(alloc_mat, pinv_alloc_, cv::DECOMP_SVD);
@@ -66 +68 @@
-        forces_pub_ = this->create_publisher<std_msgs::msg::Float64MultiArray>("output_forces", 10);
+  forces_pub_ = this->create_publisher<std_msgs::msg::Float64MultiArray>("output_forces", 10);
@@ -68 +70 @@
-        signals_pub_ = this->create_publisher<std_msgs::msg::UInt32>("signals", 10);
+  signals_pub_ = this->create_publisher<std_msgs::msg::UInt32>("signals", 10);
@@ -70 +72,2 @@
-        forces_sub_ = this->create_subscription<geometry_msgs::msg::Wrench>("input_forces", 10, std::bind(&ThrustPublisher::wrenchCallback, this, _1));
+  forces_sub_ = this->create_subscription<geometry_msgs::msg::Wrench>("input_forces", 10,
+      std::bind(&ThrustPublisher::wrenchCallback, this, _1));
@@ -72 +75 @@
-        RCLCPP_INFO(this->get_logger(), "Thrust Allocator succesfully started!");
+  RCLCPP_INFO(this->get_logger(), "Thrust Allocator succesfully started!");
@@ -74 +77 @@
-    }
+}
@@ -77,7 +80,7 @@
-    void ThrustPublisher::wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const
-    {
-        double tau_arr[6] =
-        {
-            msg->force.x, msg->force.y, msg->force.z,
-            msg->torque.x, msg->torque.y, msg->torque.z,
-        };
+void ThrustPublisher::wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const
+{
+  double tau_arr[6] =
+  {
+    msg->force.x, msg->force.y, msg->force.z,
+    msg->torque.x, msg->torque.y, msg->torque.z,
+  };
@@ -85,3 +88,4 @@
-        cv::Mat tau_mat (6, 1, CV_64F);
-        for (int i = 0; i < 6; i++)
-            tau_mat.at<double>(i, 0) = tau_arr[i];
+  cv::Mat tau_mat (6, 1, CV_64F);
+  for (int i = 0; i < 6; i++) {
+    tau_mat.at<double>(i, 0) = tau_arr[i];
+  }
@@ -89 +93 @@
-        cv::Mat thrust_mat =  pinv_alloc_*tau_mat;
+  cv::Mat thrust_mat = pinv_alloc_ * tau_mat;
@@ -91,6 +95,5 @@
-        std::vector<double> thrust;
-        uint32_t signal = 0;
-        for (int i = 0; i < num_thrusters_ ; i++)
-        {
-            double thruster_thrust = thrust_mat.at<double>(i,0);
-            thrust.push_back(thruster_thrust);
+  std::vector<double> thrust;
+  uint32_t signal = 0;
+  for (int i = 0; i < num_thrusters_ ; i++) {
+    double thruster_thrust = thrust_mat.at<double>(i, 0);
+    thrust.push_back(thruster_thrust);
@@ -98,2 +101,2 @@
-            uint32_t t_level = forceToLevel(thruster_thrust);
-            uint32_t t_bits = t_level << (bits_per_thruster_ * i);
+    uint32_t t_level = forceToLevel(thruster_thrust);
+    uint32_t t_bits = t_level << (bits_per_thruster_ * i);
@@ -101,2 +104,2 @@
-            signal |= t_bits;
-        }
+    signal |= t_bits;
+  }
@@ -105 +108 @@
-        signal |= 0b10101010000000000000000000000000;
+  signal |= 0b10101010000000000000000000000000;
@@ -108,6 +111,31 @@
-        auto forces_msg = std_msgs::msg::Float64MultiArray();
-        forces_msg.data = thrust;
-        forces_pub_->publish(forces_msg);
-        auto signal_msg = std_msgs::msg::UInt32();
-        signal_msg.data = signal;
-        signals_pub_->publish(signal_msg);
+  auto forces_msg = std_msgs::msg::Float64MultiArray();
+  forces_msg.data = thrust;
+  forces_pub_->publish(forces_msg);
+  auto signal_msg = std_msgs::msg::UInt32();
+  signal_msg.data = signal;
+  signals_pub_->publish(signal_msg);
+}
+
+std::vector<double> ThrustPublisher::cross(std::vector<double> r, std::vector<double> F)
+{
+  std::vector<double> tau;
+  tau.push_back(r[1] * F[2] - r[2] * F[1]);
+  tau.push_back(r[2] * F[0] - r[0] * F[2]);
+  tau.push_back(r[0] * F[1] - r[1] * F[0]);
+  return tau;
+}
+
+std::vector<std::vector<double>> ThrustPublisher::createAllocMat()
+{
+  std::vector<std::vector<double>> alloc_mat;
+  for (int i = 0; i < num_thrusters_; i++) {
+    std::vector<double> F = {x_contribs_[i], y_contribs_[i], z_contribs_[i]};
+    std::vector<double> r = {x_lens_[i], y_lens_[i], z_lens_[i]};
+    std::vector<double> tau = cross(r, F);
+    F.insert(F.end(), tau.begin(), tau.end());
+    alloc_mat.push_back(F);
+  }
+  std::vector<std::vector<double>> alloc_mat_trans(6, std::vector<double>(num_thrusters_));
+  for(int i = 0; i < num_thrusters_; ++i) {
+    for(int j = 0; j < 6; ++j) {
+      alloc_mat_trans[j][i] = alloc_mat[i][j];
@@ -114,0 +143,3 @@
+  }
+  return alloc_mat_trans;
+}
@@ -116,7 +147,17 @@
-    std::vector<double> ThrustPublisher::cross(std::vector<double> r,std::vector<double> F){
-        std::vector<double> tau;
-        tau.push_back(r[1]*F[2] - r[2]*F[1]);
-        tau.push_back(r[2]*F[0] - r[0]*F[2]);
-        tau.push_back(r[0]*F[1] - r[1]*F[0]);
-        return tau;
-    }
+uint32_t ThrustPublisher::forceToLevel(double force) const
+{
+  uint32_t t_level;
+  if (force < 0.1 && force > -0.1) {
+    force = 0;
+  }
+  if (force >= 0) {
+            // levels 0 to 15 (0 is no force)
+    t_level = (uint32_t) (std::ceil(std::min(force,
+        max_fwd_) / max_fwd_ * (encode_levels_ / 2 - 1)));
+        // turn to levels 16 to 31
+    t_level += encode_levels_ / 2;
+  } else {
+            // levels 0 to 16 (0 is max rev, 16 is no force)
+    t_level = (uint32_t) (16 - std::ceil(std::max(force,
+        -max_rev_) / -max_rev_ * (encode_levels_ / 2)));
+  }
@@ -124,42 +165,3 @@
-    std::vector<std::vector<double>> ThrustPublisher::createAllocMat(){
-        std::vector<std::vector<double>> alloc_mat;
-        for (int i = 0; i < num_thrusters_; i++){
-            std::vector<double> F = {x_contribs_[i], y_contribs_[i], z_contribs_[i]};
-            std::vector<double> r = {x_lens_[i], y_lens_[i], z_lens_[i]};
-            std::vector<double> tau = cross(r, F);
-            F.insert(F.end(), tau.begin(), tau.end());
-            alloc_mat.push_back(F);
-        }
-        std::vector<std::vector<double>> alloc_mat_trans(6, std::vector<double>(num_thrusters_));
-        for(int i = 0; i < num_thrusters_; ++i){
-            for(int j = 0; j < 6; ++j){
-                alloc_mat_trans[j][i]=alloc_mat[i][j];
-            }
-        }
-        return alloc_mat_trans;
-    }
-
-    uint32_t ThrustPublisher::forceToLevel(double force) const{
-        uint32_t t_level;
-        if (force < 0.1 && force > -0.1)
-        {
-            force = 0;
-        }
-        if (force >= 0)
-        {
-            // levels 0 to 15 (0 is no force)
-            t_level = (uint32_t) (std::ceil(std::min(force, max_fwd_) / max_fwd_ * (encode_levels_/2 - 1)));
-        // turn to levels 16 to 31
-        t_level += encode_levels_ / 2;
-        }
-        else
-        {
-            // levels 0 to 16 (0 is max rev, 16 is no force)
-        t_level = (uint32_t) (16 - std::ceil(std::max(force, -max_rev_) / -max_rev_ * (encode_levels_/2)));
-        }
-
-        t_level &= ((uint32_t)pow(2, bits_per_thruster_) - 1);
-        return t_level;
-    }
-
-
+  t_level &= ((uint32_t)pow(2, bits_per_thruster_) - 1);
+  return t_level;
+}
@@ -177 +179,2 @@
-  } catch (rclcpp::exceptions::RCLError const&){} // during testing sometimes throws error
+  } catch (rclcpp::exceptions::RCLError const &) {
+  }                                               // during testing sometimes throws error
@@ -180 +182,0 @@
-
]]></failure>
  </testcase>
  <system-out>Checked files:
* include/doe_control/thrust_publisher.hpp
* src/thrust_publisher.cpp</system-out>
</testsuite>
