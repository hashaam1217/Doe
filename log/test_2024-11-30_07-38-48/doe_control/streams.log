[0.059s] Invoking command in '/home/hollowknight/Documents/code/Doe/build/doe_control': AMENT_PREFIX_PATH=/home/hollowknight/Documents/code/Doe/install/doe_control:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/hollowknight/Documents/code/Doe/install/doe_control:${CMAKE_PREFIX_PATH} DEBUGINFOD_URLS=https://debuginfod.ubuntu.com /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
[0.078s] UpdateCTestConfiguration  from :/home/hollowknight/Documents/code/Doe/build/doe_control/CTestConfiguration.ini
[0.078s] Parse Config file:/home/hollowknight/Documents/code/Doe/build/doe_control/CTestConfiguration.ini
[0.087s]    Site: Silksong
[0.087s]    Build name: (empty)
[0.087s]  Add coverage exclude regular expressions.
[0.087s] Create new tag: 20241130-1538 - Experimental
[0.087s] UpdateCTestConfiguration  from :/home/hollowknight/Documents/code/Doe/build/doe_control/CTestConfiguration.ini
[0.087s] Parse Config file:/home/hollowknight/Documents/code/Doe/build/doe_control/CTestConfiguration.ini
[0.087s] Test project /home/hollowknight/Documents/code/Doe/build/doe_control
[0.087s] Constructing a list of tests
[0.087s] Done constructing a list of tests
[0.087s] Updating test list for fixtures
[0.088s] Added 0 tests to meet fixture requirements
[0.088s] Checking test dependency graph...
[0.088s] Checking test dependency graph end
[0.088s] test 1
[0.088s]     Start 1: cppcheck
[0.088s] 
[0.088s] 1: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/cppcheck.xunit.xml" "--package-name" "doe_control" "--output-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/jazzy/bin/ament_cppcheck" "--xunit-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/cppcheck.xunit.xml" "--include_dirs" "/home/hollowknight/Documents/code/Doe/src/doe_control/include"
[0.088s] 1: Working Directory: /home/hollowknight/Documents/code/Doe/src/doe_control
[0.088s] 1: Test timeout computed to be: 300
[0.111s] 1: -- run_test.py: invoking following command in '/home/hollowknight/Documents/code/Doe/src/doe_control':
[0.111s] 1:  - /opt/ros/jazzy/bin/ament_cppcheck --xunit-file /home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/cppcheck.xunit.xml --include_dirs /home/hollowknight/Documents/code/Doe/src/doe_control/include
[0.176s] 1: cppcheck 2.13.0 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.
[0.190s] 1: -- run_test.py: return code 0
[0.190s] 1: -- run_test.py: verify result file '/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/cppcheck.xunit.xml'
[0.197s] 1/4 Test #1: cppcheck .........................   Passed    0.13 sec
[0.197s] test 2
[0.197s]     Start 2: lint_cmake
[0.197s] 
[0.197s] 2: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/lint_cmake.xunit.xml" "--package-name" "doe_control" "--output-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/jazzy/bin/ament_lint_cmake" "--xunit-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/lint_cmake.xunit.xml"
[0.197s] 2: Working Directory: /home/hollowknight/Documents/code/Doe/src/doe_control
[0.197s] 2: Test timeout computed to be: 60
[0.241s] 2: -- run_test.py: invoking following command in '/home/hollowknight/Documents/code/Doe/src/doe_control':
[0.241s] 2:  - /opt/ros/jazzy/bin/ament_lint_cmake --xunit-file /home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/lint_cmake.xunit.xml
[0.296s] 2: 
[0.296s] 2: No problems found
[0.304s] 2: -- run_test.py: return code 0
[0.304s] 2: -- run_test.py: verify result file '/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/lint_cmake.xunit.xml'
[0.312s] 2/4 Test #2: lint_cmake .......................   Passed    0.11 sec
[0.312s] test 3
[0.312s]     Start 3: uncrustify
[0.312s] 
[0.312s] 3: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/uncrustify.xunit.xml" "--package-name" "doe_control" "--output-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/jazzy/bin/ament_uncrustify" "--xunit-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/uncrustify.xunit.xml"
[0.312s] 3: Working Directory: /home/hollowknight/Documents/code/Doe/src/doe_control
[0.312s] 3: Test timeout computed to be: 60
[0.355s] 3: -- run_test.py: invoking following command in '/home/hollowknight/Documents/code/Doe/src/doe_control':
[0.355s] 3:  - /opt/ros/jazzy/bin/ament_uncrustify --xunit-file /home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/uncrustify.xunit.xml
[0.433s] 3: Code style divergence in file 'include/doe_control/thrust_publisher.hpp':
[0.434s] 3: 
[0.434s] 3: --- include/doe_control/thrust_publisher.hpp
[0.434s] 3: +++ include/doe_control/thrust_publisher.hpp.uncrustify
[0.434s] 3: @@ -17,2 +17,2 @@
[0.434s] 3: -    class ThrustPublisher: public rclcpp::Node
[0.434s] 3: -    {
[0.434s] 3: +class ThrustPublisher : public rclcpp::Node
[0.434s] 3: +{
[0.434s] 3: @@ -20,2 +20 @@
[0.434s] 3: -    public:
[0.434s] 3: -
[0.434s] 3: +public:
[0.434s] 3: @@ -29 +28 @@
[0.434s] 3: -        explicit ThrustPublisher(const rclcpp::NodeOptions & options);
[0.434s] 3: +  explicit ThrustPublisher(const rclcpp::NodeOptions & options);
[0.434s] 3: @@ -31,2 +30 @@
[0.434s] 3: -    private:
[0.435s] 3: -
[0.435s] 3: +private:
[0.435s] 3: @@ -43 +41 @@
[0.435s] 3: -        void wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const;
[0.435s] 3: +  void wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const;
[0.435s] 3: @@ -51 +49 @@
[0.435s] 3: -        std::vector<double> cross(std::vector<double> r,std::vector<double> F);
[0.435s] 3: +  std::vector<double> cross(std::vector<double> r, std::vector<double> F);
[0.435s] 3: @@ -58 +56 @@
[0.435s] 3: -        std::vector<std::vector<double>> createAllocMat();
[0.435s] 3: +  std::vector<std::vector<double>> createAllocMat();
[0.435s] 3: @@ -67 +65 @@
[0.435s] 3: -        uint32_t forceToLevel(double force) const;
[0.435s] 3: +  uint32_t forceToLevel(double force) const;
[0.435s] 3: @@ -69,2 +67,2 @@
[0.435s] 3: -        rclcpp::Publisher<std_msgs::msg::Float64MultiArray>::SharedPtr forces_pub_;
[0.435s] 3: -        rclcpp::Publisher<std_msgs::msg::UInt32>::SharedPtr signals_pub_;
[0.435s] 3: +  rclcpp::Publisher<std_msgs::msg::Float64MultiArray>::SharedPtr forces_pub_;
[0.435s] 3: +  rclcpp::Publisher<std_msgs::msg::UInt32>::SharedPtr signals_pub_;
[0.436s] 3: @@ -72 +70 @@
[0.436s] 3: -        rclcpp::Subscription<geometry_msgs::msg::Wrench>::SharedPtr forces_sub_;
[0.436s] 3: +  rclcpp::Subscription<geometry_msgs::msg::Wrench>::SharedPtr forces_sub_;
[0.436s] 3: @@ -74 +72 @@
[0.436s] 3: -        cv::Mat pinv_alloc_;
[0.436s] 3: +  cv::Mat pinv_alloc_;
[0.436s] 3: @@ -76,12 +74,12 @@
[0.436s] 3: -        int num_thrusters_ = 0;
[0.436s] 3: -        int bits_per_thruster_ = 0;
[0.436s] 3: -        int encode_levels_ = 0;
[0.436s] 3: -        double max_fwd_ = 0;
[0.436s] 3: -        double max_rev_ = 0;
[0.436s] 3: -        std::vector<double> x_lens_;
[0.436s] 3: -        std::vector<double> y_lens_;
[0.436s] 3: -        std::vector<double> z_lens_;
[0.436s] 3: -        std::vector<double> x_contribs_;
[0.436s] 3: -        std::vector<double> y_contribs_;
[0.436s] 3: -        std::vector<double> z_contribs_;
[0.436s] 3: -    };
[0.436s] 3: +  int num_thrusters_ = 0;
[0.437s] 3: +  int bits_per_thruster_ = 0;
[0.437s] 3: +  int encode_levels_ = 0;
[0.437s] 3: +  double max_fwd_ = 0;
[0.437s] 3: +  double max_rev_ = 0;
[0.437s] 3: +  std::vector<double> x_lens_;
[0.437s] 3: +  std::vector<double> y_lens_;
[0.437s] 3: +  std::vector<double> z_lens_;
[0.437s] 3: +  std::vector<double> x_contribs_;
[0.437s] 3: +  std::vector<double> y_contribs_;
[0.437s] 3: +  std::vector<double> z_contribs_;
[0.437s] 3: +};
[0.437s] 3: 
[0.437s] 3: Code style divergence in file 'src/thrust_publisher.cpp':
[0.437s] 3: 
[0.437s] 3: --- src/thrust_publisher.cpp
[0.437s] 3: +++ src/thrust_publisher.cpp.uncrustify
[0.437s] 3: @@ -7,2 +7,2 @@
[0.437s] 3: -    ThrustPublisher::ThrustPublisher(const rclcpp::NodeOptions & options) :
[0.437s] 3: -    Node ("thrust_publisher", options),
[0.437s] 3: +ThrustPublisher::ThrustPublisher(const rclcpp::NodeOptions & options)
[0.437s] 3: +:Node ("thrust_publisher", options),
[0.438s] 3: @@ -10,3 +10,3 @@
[0.438s] 3: -        x_lens_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: -        y_lens_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: -        z_lens_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: +  x_lens_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: +  y_lens_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: +  z_lens_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: @@ -14,9 +14,9 @@
[0.438s] 3: -        x_contribs_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: -        y_contribs_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: -        z_contribs_ (SUPPORTED_THRUSTERS, 0)
[0.438s] 3: -    {
[0.438s] 3: -        this->declare_parameter<int>("num_thrusters", num_thrusters_);
[0.438s] 3: -        if (num_thrusters_ > SUPPORTED_THRUSTERS)
[0.438s] 3: -        {
[0.438s] 3: -            RCLCPP_ERROR(this->get_logger(), "Number of thrusters is greater than supported thruster count");
[0.438s] 3: -        }
[0.438s] 3: +  x_contribs_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: +  y_contribs_ (SUPPORTED_THRUSTERS, 0),
[0.438s] 3: +  z_contribs_ (SUPPORTED_THRUSTERS, 0)
[0.439s] 3: +{
[0.439s] 3: +  this->declare_parameter<int>("num_thrusters", num_thrusters_);
[0.439s] 3: +  if (num_thrusters_ > SUPPORTED_THRUSTERS) {
[0.439s] 3: +    RCLCPP_ERROR(this->get_logger(),
[0.439s] 3: +        "Number of thrusters is greater than supported thruster count");
[0.439s] 3: +  }
[0.439s] 3: @@ -24,2 +24,2 @@
[0.439s] 3: -        this->declare_parameter<int>("bits_per_thruster", bits_per_thruster_);
[0.439s] 3: -        this->get_parameter("bits_per_thruster", bits_per_thruster_);
[0.439s] 3: +  this->declare_parameter<int>("bits_per_thruster", bits_per_thruster_);
[0.439s] 3: +  this->get_parameter("bits_per_thruster", bits_per_thruster_);
[0.439s] 3: @@ -27,6 +27,6 @@
[0.439s] 3: -        this->declare_parameter<double>("max_fwd", max_fwd_);
[0.439s] 3: -        this->get_parameter("max_fwd", max_fwd_);
[0.439s] 3: -        max_fwd_ *= 9.807; // kgf to N
[0.439s] 3: -        this->declare_parameter<double>("max_rev", max_rev_);
[0.439s] 3: -        max_rev_ *= 9.807; // kgf to N
[0.439s] 3: -        this->get_parameter("max_rev", max_rev_);
[0.439s] 3: +  this->declare_parameter<double>("max_fwd", max_fwd_);
[0.439s] 3: +  this->get_parameter("max_fwd", max_fwd_);
[0.440s] 3: +  max_fwd_ *= 9.807;       // kgf to N
[0.440s] 3: +  this->declare_parameter<double>("max_rev", max_rev_);
[0.440s] 3: +  max_rev_ *= 9.807;       // kgf to N
[0.440s] 3: +  this->get_parameter("max_rev", max_rev_);
[0.440s] 3: @@ -34 +34 @@
[0.440s] 3: -        encode_levels_ = pow(2,bits_per_thruster_);
[0.440s] 3: +  encode_levels_ = pow(2, bits_per_thruster_);
[0.440s] 3: @@ -36 +36,2 @@
[0.440s] 3: -        std::string names[SUPPORTED_THRUSTERS] = {"thruster1", "thruster2", "thruster3", "thruster4", "thruster5", "thruster6", "thruster8", "thruster9", "thruster10"};
[0.440s] 3: +  std::string names[SUPPORTED_THRUSTERS] = {"thruster1", "thruster2", "thruster3", "thruster4",
[0.441s] 3: +    "thruster5", "thruster6", "thruster8", "thruster9", "thruster10"};
[0.441s] 3: @@ -38,8 +39,7 @@
[0.441s] 3: -        for (int i = 0; i < SUPPORTED_THRUSTERS; i++)
[0.441s] 3: -        {
[0.441s] 3: -            this->declare_parameter(names[i]+".contrib.x", x_contribs_[i]);
[0.441s] 3: -            this->declare_parameter(names[i]+".contrib.y", y_contribs_[i]);
[0.441s] 3: -            this->declare_parameter(names[i]+".contrib.z", z_contribs_[i]);
[0.441s] 3: -            this->declare_parameter(names[i]+".lx", x_lens_[i]);
[0.441s] 3: -            this->declare_parameter(names[i]+".ly", y_lens_[i]);
[0.441s] 3: -            this->declare_parameter(names[i]+".lz", z_lens_[i]);
[0.442s] 3: +  for (int i = 0; i < SUPPORTED_THRUSTERS; i++) {
[0.442s] 3: +    this->declare_parameter(names[i] + ".contrib.x", x_contribs_[i]);
[0.442s] 3: +    this->declare_parameter(names[i] + ".contrib.y", y_contribs_[i]);
[0.442s] 3: +    this->declare_parameter(names[i] + ".contrib.z", z_contribs_[i]);
[0.442s] 3: +    this->declare_parameter(names[i] + ".lx", x_lens_[i]);
[0.442s] 3: +    this->declare_parameter(names[i] + ".ly", y_lens_[i]);
[0.442s] 3: +    this->declare_parameter(names[i] + ".lz", z_lens_[i]);
[0.442s] 3: @@ -47,8 +47,8 @@
[0.442s] 3: -            this->get_parameter(names[i]+".contrib.x", x_contribs_[i]);
[0.442s] 3: -            this->get_parameter(names[i]+".contrib.y", y_contribs_[i]);
[0.442s] 3: -            this->get_parameter(names[i]+".contrib.z", z_contribs_[i]);
[0.442s] 3: -            this->get_parameter(names[i]+".lx", x_lens_[i]);
[0.442s] 3: -            this->get_parameter(names[i]+".ly", y_lens_[i]);
[0.442s] 3: -            this->get_parameter(names[i]+".lz", z_lens_[i]);
[0.442s] 3: -        }
[0.442s] 3: -        std::vector<std::vector<double>> alloc_vec =  createAllocMat();
[0.443s] 3: +    this->get_parameter(names[i] + ".contrib.x", x_contribs_[i]);
[0.443s] 3: +    this->get_parameter(names[i] + ".contrib.y", y_contribs_[i]);
[0.443s] 3: +    this->get_parameter(names[i] + ".contrib.z", z_contribs_[i]);
[0.443s] 3: +    this->get_parameter(names[i] + ".lx", x_lens_[i]);
[0.443s] 3: +    this->get_parameter(names[i] + ".ly", y_lens_[i]);
[0.443s] 3: +    this->get_parameter(names[i] + ".lz", z_lens_[i]);
[0.443s] 3: +  }
[0.443s] 3: +  std::vector<std::vector<double>> alloc_vec = createAllocMat();
[0.443s] 3: @@ -56,4 +56,6 @@
[0.443s] 3: -        cv::Mat alloc_mat (alloc_vec.size(), alloc_vec[0].size(), CV_64FC1);
[0.443s] 3: -        for (int i = 0; i < alloc_mat.rows; i++)
[0.443s] 3: -            for (int j = 0; j < alloc_mat.cols; j++)
[0.443s] 3: -                alloc_mat.at<double>(i,j) = alloc_vec[i][j];
[0.443s] 3: +  cv::Mat alloc_mat (alloc_vec.size(), alloc_vec[0].size(), CV_64FC1);
[0.443s] 3: +  for (int i = 0; i < alloc_mat.rows; i++) {
[0.443s] 3: +    for (int j = 0; j < alloc_mat.cols; j++) {
[0.444s] 3: +      alloc_mat.at<double>(i, j) = alloc_vec[i][j];
[0.444s] 3: +    }
[0.444s] 3: +  }
[0.444s] 3: @@ -64 +66 @@
[0.444s] 3: -        cv::invert(alloc_mat, pinv_alloc_, cv::DECOMP_SVD);
[0.444s] 3: +  cv::invert(alloc_mat, pinv_alloc_, cv::DECOMP_SVD);
[0.444s] 3: @@ -66 +68 @@
[0.444s] 3: -        forces_pub_ = this->create_publisher<std_msgs::msg::Float64MultiArray>("output_forces", 10);
[0.444s] 3: +  forces_pub_ = this->create_publisher<std_msgs::msg::Float64MultiArray>("output_forces", 10);
[0.444s] 3: @@ -68 +70 @@
[0.444s] 3: -        signals_pub_ = this->create_publisher<std_msgs::msg::UInt32>("signals", 10);
[0.444s] 3: +  signals_pub_ = this->create_publisher<std_msgs::msg::UInt32>("signals", 10);
[0.444s] 3: @@ -70 +72,2 @@
[0.444s] 3: -        forces_sub_ = this->create_subscription<geometry_msgs::msg::Wrench>("input_forces", 10, std::bind(&ThrustPublisher::wrenchCallback, this, _1));
[0.444s] 3: +  forces_sub_ = this->create_subscription<geometry_msgs::msg::Wrench>("input_forces", 10,
[0.444s] 3: +      std::bind(&ThrustPublisher::wrenchCallback, this, _1));
[0.444s] 3: @@ -72 +75 @@
[0.444s] 3: -        RCLCPP_INFO(this->get_logger(), "Thrust Allocator succesfully started!");
[0.445s] 3: +  RCLCPP_INFO(this->get_logger(), "Thrust Allocator succesfully started!");
[0.445s] 3: @@ -74 +77 @@
[0.445s] 3: -    }
[0.445s] 3: +}
[0.445s] 3: @@ -77,7 +80,7 @@
[0.445s] 3: -    void ThrustPublisher::wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const
[0.445s] 3: -    {
[0.445s] 3: -        double tau_arr[6] =
[0.445s] 3: -        {
[0.445s] 3: -            msg->force.x, msg->force.y, msg->force.z,
[0.445s] 3: -            msg->torque.x, msg->torque.y, msg->torque.z,
[0.445s] 3: -        };
[0.445s] 3: +void ThrustPublisher::wrenchCallback(const geometry_msgs::msg::Wrench::SharedPtr msg) const
[0.445s] 3: +{
[0.445s] 3: +  double tau_arr[6] =
[0.445s] 3: +  {
[0.445s] 3: +    msg->force.x, msg->force.y, msg->force.z,
[0.445s] 3: +    msg->torque.x, msg->torque.y, msg->torque.z,
[0.445s] 3: +  };
[0.445s] 3: @@ -85,3 +88,4 @@
[0.446s] 3: -        cv::Mat tau_mat (6, 1, CV_64F);
[0.446s] 3: -        for (int i = 0; i < 6; i++)
[0.446s] 3: -            tau_mat.at<double>(i, 0) = tau_arr[i];
[0.446s] 3: +  cv::Mat tau_mat (6, 1, CV_64F);
[0.446s] 3: +  for (int i = 0; i < 6; i++) {
[0.446s] 3: +    tau_mat.at<double>(i, 0) = tau_arr[i];
[0.446s] 3: +  }
[0.446s] 3: @@ -89 +93 @@
[0.446s] 3: -        cv::Mat thrust_mat =  pinv_alloc_*tau_mat;
[0.446s] 3: +  cv::Mat thrust_mat = pinv_alloc_ * tau_mat;
[0.446s] 3: @@ -91,6 +95,5 @@
[0.446s] 3: -        std::vector<double> thrust;
[0.446s] 3: -        uint32_t signal = 0;
[0.446s] 3: -        for (int i = 0; i < num_thrusters_ ; i++)
[0.446s] 3: -        {
[0.446s] 3: -            double thruster_thrust = thrust_mat.at<double>(i,0);
[0.446s] 3: -            thrust.push_back(thruster_thrust);
[0.446s] 3: +  std::vector<double> thrust;
[0.446s] 3: +  uint32_t signal = 0;
[0.446s] 3: +  for (int i = 0; i < num_thrusters_ ; i++) {
[0.446s] 3: +    double thruster_thrust = thrust_mat.at<double>(i, 0);
[0.447s] 3: +    thrust.push_back(thruster_thrust);
[0.447s] 3: @@ -98,2 +101,2 @@
[0.447s] 3: -            uint32_t t_level = forceToLevel(thruster_thrust);
[0.447s] 3: -            uint32_t t_bits = t_level << (bits_per_thruster_ * i);
[0.447s] 3: +    uint32_t t_level = forceToLevel(thruster_thrust);
[0.447s] 3: +    uint32_t t_bits = t_level << (bits_per_thruster_ * i);
[0.447s] 3: @@ -101,2 +104,2 @@
[0.447s] 3: -            signal |= t_bits;
[0.447s] 3: -        }
[0.447s] 3: +    signal |= t_bits;
[0.447s] 3: +  }
[0.447s] 3: @@ -105 +108 @@
[0.447s] 3: -        signal |= 0b10101010000000000000000000000000;
[0.447s] 3: +  signal |= 0b10101010000000000000000000000000;
[0.447s] 3: @@ -108,6 +111,31 @@
[0.447s] 3: -        auto forces_msg = std_msgs::msg::Float64MultiArray();
[0.447s] 3: -        forces_msg.data = thrust;
[0.447s] 3: -        forces_pub_->publish(forces_msg);
[0.447s] 3: -        auto signal_msg = std_msgs::msg::UInt32();
[0.447s] 3: -        signal_msg.data = signal;
[0.448s] 3: -        signals_pub_->publish(signal_msg);
[0.448s] 3: +  auto forces_msg = std_msgs::msg::Float64MultiArray();
[0.448s] 3: +  forces_msg.data = thrust;
[0.448s] 3: +  forces_pub_->publish(forces_msg);
[0.448s] 3: +  auto signal_msg = std_msgs::msg::UInt32();
[0.448s] 3: +  signal_msg.data = signal;
[0.448s] 3: +  signals_pub_->publish(signal_msg);
[0.448s] 3: +}
[0.448s] 3: +
[0.448s] 3: +std::vector<double> ThrustPublisher::cross(std::vector<double> r, std::vector<double> F)
[0.448s] 3: +{
[0.448s] 3: +  std::vector<double> tau;
[0.448s] 3: +  tau.push_back(r[1] * F[2] - r[2] * F[1]);
[0.448s] 3: +  tau.push_back(r[2] * F[0] - r[0] * F[2]);
[0.448s] 3: +  tau.push_back(r[0] * F[1] - r[1] * F[0]);
[0.448s] 3: +  return tau;
[0.448s] 3: +}
[0.448s] 3: +
[0.448s] 3: +std::vector<std::vector<double>> ThrustPublisher::createAllocMat()
[0.448s] 3: +{
[0.448s] 3: +  std::vector<std::vector<double>> alloc_mat;
[0.449s] 3: +  for (int i = 0; i < num_thrusters_; i++) {
[0.449s] 3: +    std::vector<double> F = {x_contribs_[i], y_contribs_[i], z_contribs_[i]};
[0.449s] 3: +    std::vector<double> r = {x_lens_[i], y_lens_[i], z_lens_[i]};
[0.449s] 3: +    std::vector<double> tau = cross(r, F);
[0.449s] 3: +    F.insert(F.end(), tau.begin(), tau.end());
[0.449s] 3: +    alloc_mat.push_back(F);
[0.449s] 3: +  }
[0.449s] 3: +  std::vector<std::vector<double>> alloc_mat_trans(6, std::vector<double>(num_thrusters_));
[0.449s] 3: +  for(int i = 0; i < num_thrusters_; ++i) {
[0.449s] 3: +    for(int j = 0; j < 6; ++j) {
[0.449s] 3: +      alloc_mat_trans[j][i] = alloc_mat[i][j];
[0.449s] 3: @@ -114,0 +143,3 @@
[0.449s] 3: +  }
[0.449s] 3: +  return alloc_mat_trans;
[0.449s] 3: +}
[0.449s] 3: @@ -116,7 +147,17 @@
[0.449s] 3: -    std::vector<double> ThrustPublisher::cross(std::vector<double> r,std::vector<double> F){
[0.449s] 3: -        std::vector<double> tau;
[0.449s] 3: -        tau.push_back(r[1]*F[2] - r[2]*F[1]);
[0.449s] 3: -        tau.push_back(r[2]*F[0] - r[0]*F[2]);
[0.449s] 3: -        tau.push_back(r[0]*F[1] - r[1]*F[0]);
[0.450s] 3: -        return tau;
[0.450s] 3: -    }
[0.450s] 3: +uint32_t ThrustPublisher::forceToLevel(double force) const
[0.450s] 3: +{
[0.450s] 3: +  uint32_t t_level;
[0.450s] 3: +  if (force < 0.1 && force > -0.1) {
[0.450s] 3: +    force = 0;
[0.450s] 3: +  }
[0.450s] 3: +  if (force >= 0) {
[0.450s] 3: +            // levels 0 to 15 (0 is no force)
[0.450s] 3: +    t_level = (uint32_t) (std::ceil(std::min(force,
[0.450s] 3: +        max_fwd_) / max_fwd_ * (encode_levels_ / 2 - 1)));
[0.450s] 3: +        // turn to levels 16 to 31
[0.450s] 3: +    t_level += encode_levels_ / 2;
[0.450s] 3: +  } else {
[0.450s] 3: +            // levels 0 to 16 (0 is max rev, 16 is no force)
[0.450s] 3: +    t_level = (uint32_t) (16 - std::ceil(std::max(force,
[0.450s] 3: +        -max_rev_) / -max_rev_ * (encode_levels_ / 2)));
[0.450s] 3: +  }
[0.450s] 3: @@ -124,42 +165,3 @@
[0.451s] 3: -    std::vector<std::vector<double>> ThrustPublisher::createAllocMat(){
[0.451s] 3: -        std::vector<std::vector<double>> alloc_mat;
[0.451s] 3: -        for (int i = 0; i < num_thrusters_; i++){
[0.451s] 3: -            std::vector<double> F = {x_contribs_[i], y_contribs_[i], z_contribs_[i]};
[0.451s] 3: -            std::vector<double> r = {x_lens_[i], y_lens_[i], z_lens_[i]};
[0.451s] 3: -            std::vector<double> tau = cross(r, F);
[0.451s] 3: -            F.insert(F.end(), tau.begin(), tau.end());
[0.451s] 3: -            alloc_mat.push_back(F);
[0.451s] 3: -        }
[0.451s] 3: -        std::vector<std::vector<double>> alloc_mat_trans(6, std::vector<double>(num_thrusters_));
[0.451s] 3: -        for(int i = 0; i < num_thrusters_; ++i){
[0.451s] 3: -            for(int j = 0; j < 6; ++j){
[0.451s] 3: -                alloc_mat_trans[j][i]=alloc_mat[i][j];
[0.451s] 3: -            }
[0.451s] 3: -        }
[0.451s] 3: -        return alloc_mat_trans;
[0.451s] 3: -    }
[0.451s] 3: -
[0.452s] 3: -    uint32_t ThrustPublisher::forceToLevel(double force) const{
[0.452s] 3: -        uint32_t t_level;
[0.452s] 3: -        if (force < 0.1 && force > -0.1)
[0.452s] 3: -        {
[0.452s] 3: -            force = 0;
[0.452s] 3: -        }
[0.452s] 3: -        if (force >= 0)
[0.452s] 3: -        {
[0.452s] 3: -            // levels 0 to 15 (0 is no force)
[0.452s] 3: -            t_level = (uint32_t) (std::ceil(std::min(force, max_fwd_) / max_fwd_ * (encode_levels_/2 - 1)));
[0.452s] 3: -        // turn to levels 16 to 31
[0.452s] 3: -        t_level += encode_levels_ / 2;
[0.452s] 3: -        }
[0.452s] 3: -        else
[0.452s] 3: -        {
[0.452s] 3: -            // levels 0 to 16 (0 is max rev, 16 is no force)
[0.452s] 3: -        t_level = (uint32_t) (16 - std::ceil(std::max(force, -max_rev_) / -max_rev_ * (encode_levels_/2)));
[0.452s] 3: -        }
[0.452s] 3: -
[0.452s] 3: -        t_level &= ((uint32_t)pow(2, bits_per_thruster_) - 1);
[0.452s] 3: -        return t_level;
[0.452s] 3: -    }
[0.452s] 3: -
[0.453s] 3: -
[0.453s] 3: +  t_level &= ((uint32_t)pow(2, bits_per_thruster_) - 1);
[0.453s] 3: +  return t_level;
[0.453s] 3: +}
[0.453s] 3: @@ -177 +179,2 @@
[0.453s] 3: -  } catch (rclcpp::exceptions::RCLError const&){} // during testing sometimes throws error
[0.453s] 3: +  } catch (rclcpp::exceptions::RCLError const &) {
[0.453s] 3: +  }                                               // during testing sometimes throws error
[0.453s] 3: @@ -180 +182,0 @@
[0.453s] 3: -
[0.453s] 3: 
[0.453s] 3: 2 files with code style divergence
[0.453s] 3: -- run_test.py: return code 1
[0.453s] 3: -- run_test.py: verify result file '/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/uncrustify.xunit.xml'
[0.453s] 3/4 Test #3: uncrustify .......................***Failed    0.14 sec
[0.453s] test 4
[0.453s]     Start 4: xmllint
[0.453s] 
[0.453s] 4: Test command: /usr/bin/python3 "-u" "/opt/ros/jazzy/share/ament_cmake_test/cmake/run_test.py" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/xmllint.xunit.xml" "--package-name" "doe_control" "--output-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/ament_xmllint/xmllint.txt" "--command" "/opt/ros/jazzy/bin/ament_xmllint" "--xunit-file" "/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/xmllint.xunit.xml"
[0.454s] 4: Working Directory: /home/hollowknight/Documents/code/Doe/src/doe_control
[0.454s] 4: Test timeout computed to be: 60
[0.493s] 4: -- run_test.py: invoking following command in '/home/hollowknight/Documents/code/Doe/src/doe_control':
[0.494s] 4:  - /opt/ros/jazzy/bin/ament_xmllint --xunit-file /home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/xmllint.xunit.xml
[0.642s] 4: File 'package.xml' is valid
[0.642s] 4: 
[0.642s] 4: No problems found
[0.651s] 4: -- run_test.py: return code 0
[0.651s] 4: -- run_test.py: verify result file '/home/hollowknight/Documents/code/Doe/build/doe_control/test_results/doe_control/xmllint.xunit.xml'
[0.658s] 4/4 Test #4: xmllint ..........................   Passed    0.21 sec
[0.658s] 
[0.658s] 75% tests passed[0;0m, [0;31m1 tests failed[0;0m out of 4
[0.658s] 
[0.658s] Label Time Summary:
[0.658s] cppcheck      =   0.13 sec*proc (1 test)
[0.658s] lint_cmake    =   0.11 sec*proc (1 test)
[0.659s] linter        =   0.59 sec*proc (4 tests)
[0.659s] uncrustify    =   0.14 sec*proc (1 test)
[0.659s] xmllint       =   0.21 sec*proc (1 test)
[0.659s] 
[0.659s] Total Test time (real) =   0.59 sec
[0.659s] 
[0.659s] The following tests FAILED:
[0.659s] 	[0;31m  3 - uncrustify (Failed)[0;0m
[0.661s] Errors while running CTest
[0.661s] Output from these tests are in: /home/hollowknight/Documents/code/Doe/build/doe_control/Testing/Temporary/LastTest.log
[0.661s] Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.
[0.665s] Invoked command in '/home/hollowknight/Documents/code/Doe/build/doe_control' returned '8': AMENT_PREFIX_PATH=/home/hollowknight/Documents/code/Doe/install/doe_control:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/hollowknight/Documents/code/Doe/install/doe_control:${CMAKE_PREFIX_PATH} DEBUGINFOD_URLS=https://debuginfod.ubuntu.com /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
